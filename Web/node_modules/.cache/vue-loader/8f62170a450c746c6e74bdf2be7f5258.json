{"remainingRequest":"E:\\NetModular.CodeGenerator\\src\\UI\\module-codegenerator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\NetModular.CodeGenerator\\src\\UI\\module-codegenerator\\node_modules\\netmodular-ui\\packages\\components\\tree-select\\mixins.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\NetModular.CodeGenerator\\src\\UI\\module-codegenerator\\node_modules\\netmodular-ui\\packages\\components\\tree-select\\mixins.vue","mtime":1706623144539},{"path":"E:\\NetModular.CodeGenerator\\src\\UI\\module-codegenerator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1706623138253},{"path":"E:\\NetModular.CodeGenerator\\src\\UI\\module-codegenerator\\node_modules\\babel-loader\\lib\\index.js","mtime":1706623138119},{"path":"E:\\NetModular.CodeGenerator\\src\\UI\\module-codegenerator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1706623138253},{"path":"E:\\NetModular.CodeGenerator\\src\\UI\\module-codegenerator\\node_modules\\vue-loader\\lib\\index.js","mtime":1706623133543}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["mixins.vue"],"names":[],"mappings":";AAyfile":"mixins.vue","sourceRoot":"node_modules/netmodular-ui/packages/components/tree-select","sourcesContent":["<template>\r\n  <!--使用popover来实现下拉效果-->\r\n  <el-popover ref=\"popover\" :popper-class=\"popperClass\" v-model=\"visible\" :width=\"width\">\r\n    <nm-box page header no-scrollbar :title=\"title_\" :icon=\"icon\" footer :loading=\"showLoading\">\r\n      <template v-slot:toolbar>\r\n        <!--全部折叠按钮-->\r\n        <el-tooltip v-if=\"collapseAll\" effect=\"dark\" :content=\"collapsed ? '展开全部' : '折叠全部'\" placement=\"top\">\r\n          <nm-button :icon=\"collapsed ? 'unfold' : 'fold'\" @click=\"onCollapseAll\" />\r\n        </el-tooltip>\r\n        <!--刷新按钮-->\r\n        <nm-button v-if=\"refresh\" icon=\"refresh\" @click=\"refreshTree\" />\r\n      </template>\r\n      <section class=\"nm-tree-select-content\">\r\n        <!--搜索框-->\r\n        <div class=\"nm-tree-select-search-wrapper\">\r\n          <el-input :size=\"fontSize\" v-if=\"filterable\" class=\"nm-tree-select-search\" v-model=\"keyword\" placeholder=\"请输入内容\" prefix-icon=\"el-icon-search\"> </el-input>\r\n        </div>\r\n        <!--树结构-->\r\n        <div class=\"nm-tree-select-tree-wrapper\">\r\n          <div class=\"nm-tree-select-tree-main\">\r\n            <nm-scrollbar horizontal>\r\n              <el-tree ref=\"tree\" v-bind=\"treeOptions\" v-on=\"treeOn\"> </el-tree>\r\n            </nm-scrollbar>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <!--按钮-->\r\n      <template v-slot:footer>\r\n        <div style=\"float:left\">\r\n          <span style=\"float:left;font-size:12px;\">\r\n            {{ multiple ? '多选' : '单选' }}\r\n            <span v-if=\"multiple && multipleLimit > 0\"\r\n              >(<label class=\"nm-size-13 nm-text-danger nm-p-3\">{{ selection.length }}/{{ multipleLimit }}</label\r\n              >)</span\r\n            >\r\n          </span>\r\n        </div>\r\n        <el-button type=\"text\" @click=\"save\">确定</el-button>\r\n        <el-button class=\"nm-text-warning\" type=\"text\" @click=\"reset\">重置</el-button>\r\n        <el-button class=\"nm-text-info\" type=\"text\" @click=\"visible = false\">取消</el-button>\r\n      </template>\r\n    </nm-box>\r\n    <!--展示-->\r\n    <el-input\r\n      ref=\"input\"\r\n      :value=\"label\"\r\n      class=\"nm-tree-select-input\"\r\n      :placeholder=\"placeholder\"\r\n      :disabled=\"disabled\"\r\n      :suffix-icon=\"visible ? 'el-icon-arrow-up' : 'el-icon-arrow-down'\"\r\n      readonly\r\n      slot=\"reference\"\r\n    >\r\n    </el-input>\r\n  </el-popover>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      title_: this.title,\r\n      /**树配置 */\r\n      treeOptions: {\r\n        data: [],\r\n        nodeKey: 'id',\r\n        props: {\r\n          children: 'children',\r\n          label: 'label'\r\n        },\r\n        showCheckbox: true,\r\n        checkStrictly: true,\r\n        defaultExpandAll: this.defaultExpandAll,\r\n        defaultExpandedKeys: [],\r\n        filterNodeMethod: this.filterNode\r\n      },\r\n      /**树事件 */\r\n      treeOn: {\r\n        check: this.onCheck,\r\n        'node-expand': this.onNodeExpand,\r\n        'node-collapse': this.onNodeCollapse\r\n      },\r\n      /**是否显示 */\r\n      visible: false,\r\n      /**输入框显示文本 */\r\n      label: '',\r\n      /**过滤关键字 */\r\n      keyword: '',\r\n      /**已选项 */\r\n      selection: [],\r\n      /**折叠状态 */\r\n      collapsed: false,\r\n      /**加载动画 */\r\n      loading: false\r\n    }\r\n  },\r\n  props: {\r\n    value: [String, Number, Array],\r\n    placeholder: {\r\n      type: String,\r\n      default: '请选择...'\r\n    },\r\n    /**头部标题 */\r\n    title: {\r\n      type: String,\r\n      default: '请选择'\r\n    },\r\n    /**图标 */\r\n    icon: {\r\n      type: String,\r\n      default: 'tree'\r\n    },\r\n    /**宽度 */\r\n    width: {\r\n      type: String,\r\n      default: '250px'\r\n    },\r\n    /**高度 */\r\n    height: {\r\n      type: String,\r\n      default: '400px'\r\n    },\r\n    /**可搜索的 */\r\n    filterable: Boolean,\r\n    /**禁用的 */\r\n    disabled: Boolean,\r\n    /**多选 */\r\n    multiple: Boolean,\r\n    /**多选时最多可以选择的项目数，为 0 则不限制 */\r\n    multipleLimit: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**多选时展示用的分隔符 */\r\n    separator: {\r\n      type: String,\r\n      default: '/'\r\n    },\r\n    /**是否显示折叠/展开全部按钮 */\r\n    collapseAll: Boolean,\r\n    /**默认展开所有 */\r\n    defaultExpandAll: Boolean,\r\n    /**不显示加载动画 */\r\n    noLoading: Boolean,\r\n    /**是否显示刷新按钮 */\r\n    refresh: Boolean\r\n  },\r\n  computed: {\r\n    popperClass() {\r\n      return `nm-tree-select-popover ${this.filterable ? 'filterable' : ''}`\r\n    },\r\n    selection_() {\r\n      let sl = this.selection\r\n      return this.multiple ? sl.map(m => m) : sl.length > 0 ? sl[0] : null\r\n    },\r\n    /**已选中的值 */\r\n    value_() {\r\n      let sl = this.selection\r\n      return this.multiple ? sl.map(m => m.id) : sl.length > 0 ? sl[0].id : ''\r\n    },\r\n    showLoading() {\r\n      return !this.noLoading && this.loading\r\n    }\r\n  },\r\n  methods: {\r\n    refreshTree() {\r\n      this.loading = true\r\n      this.action().then(data => {\r\n        this.treeOptions.data = data\r\n        this.change()\r\n        this.loading = false\r\n      })\r\n    },\r\n    /**\r\n     * @description 选项更改处理\r\n     */\r\n    change() {\r\n      if (!this.value) return\r\n\r\n      let data = this.treeOptions.data\r\n      if (data.length < 1) return\r\n\r\n      let value = this.multiple ? this.value : [this.value]\r\n\r\n      //设置显示文本\r\n      this.setLabel(value)\r\n      //清除已选项\r\n      this.selection = []\r\n      //要展开的选项\r\n      this.treeOptions.defaultExpandedKeys = value\r\n\r\n      this.$nextTick(() => {\r\n        this.setCheckedKeys(value)\r\n        this.$emit('change', this.value_, this.selection_)\r\n      })\r\n    },\r\n    /**保存 */\r\n    save() {\r\n      if (this.multiple && this.multipleLimit > 0 && this.selection.length > this.multipleLimit) {\r\n        this.showLimitMsg()\r\n        return\r\n      }\r\n      this.setLabel(this.multiple ? this.value_ : [this.value_])\r\n      this.$emit('input', this.value_)\r\n      this.$emit('change', this.value_, this.selection_)\r\n      this.visible = false\r\n    },\r\n    /**重置 */\r\n    reset() {\r\n      this.selection = this.multiple ? [] : ''\r\n      this.setCheckedKeys([])\r\n\r\n      this.setLabel(this.multiple ? this.value_ : [this.value_])\r\n      this.$emit('input', this.value_)\r\n      this.$emit('change', this.value_, this.selection_)\r\n    },\r\n    setLabel(ids) {\r\n      let datas = []\r\n      if (ids && ids.length > 0) {\r\n        ids.map(m => {\r\n          let nodeData = this.getNodeData(this.treeOptions.data, m)\r\n          if (nodeData) {\r\n            datas.push(nodeData)\r\n          }\r\n        })\r\n      }\r\n      this.label = datas.map(m => m.label).join(` ${this.separator} `)\r\n    },\r\n    //递归获取当前数据对象\r\n    getNodeData(list, id) {\r\n      for (let i = 0; i < list.length; i++) {\r\n        const m = list[i]\r\n        if (m.id === id) {\r\n          return m\r\n        }\r\n\r\n        if (m.children) {\r\n          const nodeData = this.getNodeData(m.children, id)\r\n          if (nodeData != null) return nodeData\r\n        }\r\n      }\r\n      return null\r\n    },\r\n    /**设置选中 */\r\n    setCheckedKeys(keys) {\r\n      this.$refs.tree.setCheckedKeys(keys || this.selection.map(m => m.id))\r\n    },\r\n    /**过滤方法 */\r\n    filterNode(value, data) {\r\n      if (!value) return true\r\n      return data.label.indexOf(value) !== -1\r\n    },\r\n    /**显示限制提醒消息 */\r\n    showLimitMsg() {\r\n      this._warning(`最多只能选择${this.multipleLimit}个`)\r\n    },\r\n    /**复选框点击事件 */\r\n    onCheck(data, curr) {\r\n      const { checkedNodes, checkedKeys } = curr\r\n      if (this.multiple) {\r\n        if (this.multipleLimit > 0 && checkedKeys.length > this.multipleLimit) {\r\n          this.showLimitMsg()\r\n          this.setCheckedKeys() //恢复\r\n          return\r\n        }\r\n        this.selection = checkedNodes.map(m => m.item)\r\n      } else {\r\n        this.selection = checkedKeys.length > 0 ? [data.item] : []\r\n        this.setCheckedKeys()\r\n      }\r\n\r\n      this.$emit('check', data, curr)\r\n    },\r\n    /**折叠展开全部事件 */\r\n    onCollapseAll() {\r\n      this.collapsed = !this.collapsed\r\n      let treeStore = this.$refs.tree.store\r\n      for (var i = 0; i < treeStore._getAllNodes().length; i++) {\r\n        treeStore._getAllNodes()[i].expanded = !this.collapsed\r\n      }\r\n    },\r\n    /**节点被点击时的回调 */\r\n    onNodeClick(data, node, cmp) {\r\n      this.$emit('node-click', data, node, cmp)\r\n    },\r\n    /**节点选中状态发生变化时的回调 */\r\n    onCheckChange(data, checked, indeterminate) {\r\n      this.$emit('check-change', data, checked, indeterminate)\r\n    },\r\n    /**当前选中节点变化时触发的事件 */\r\n    onCurrentChange(data, node) {\r\n      this.$emit('current-change', data, node)\r\n    },\r\n    /**节点被展开时触发的事件 */\r\n    onNodeExpand(data, node, cmp) {\r\n      //记录展开的节点\r\n      this.treeOptions.defaultExpandedKeys.push(data.id)\r\n      this.$emit('node-expand', data, node, cmp)\r\n    },\r\n    /**节点被关闭时触发的事件 */\r\n    onNodeCollapse(data, node, cmp) {\r\n      //移除展开的节点\r\n      this.$_.pull(this.treeOptions.defaultExpandedKeys, data.id)\r\n      this.$emit('node-collapse', data, node, cmp)\r\n    }\r\n  },\r\n  created() {\r\n    this.refreshTree()\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      //初始化宽高\r\n      let el = this.$refs.popover.$el.querySelector('.el-popover')\r\n      el.style.height = this.height\r\n      el.style.width = this.width\r\n    })\r\n  },\r\n  watch: {\r\n    title(val) {\r\n      this.title_ = val\r\n    },\r\n    value(val) {\r\n      if (val !== this.value_) {\r\n        this.change()\r\n      }\r\n    },\r\n    defaultExpandAll(val) {\r\n      this.treeOptions.defaultExpandAll = val\r\n    },\r\n    keyword(val) {\r\n      if (this.filterable) this.$refs.tree.filter(val)\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}